user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log debug;  # 开发环境启用debug级别日志[9,10](@ref)
pid        /var/run/nginx.pid;

events {
    worker_connections  4096;  # 开发环境可适当提高连接数[3](@ref)
    multi_accept on;           # 允许批量接受新连接，提升并发处理能力[6](@ref)
    use epoll;                 # 显式声明使用epoll（Linux默认已启用）[3](@ref)
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 开发环境详细日志格式
    log_format  dev  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for" '
                     'rt=$request_time uct="$upstream_connect_time" '
                     'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log  /var/log/nginx/access.log  dev;  # 使用开发专用日志格式
    error_log   /var/log/nginx/error.log debug;   # 记录详细错误信息

    sendfile        on;
    tcp_nodelay     on;       # 禁用Nagle算法，减少延迟[6](@ref)
    keepalive_timeout  30;    # 开发环境可缩短保持连接时间[2](@ref)

    # 开发环境启用gzip压缩（减少传输体积）
    gzip  on;
    gzip_min_length 1k;
    gzip_types text/plain text/css application/json application/javascript;

    include /etc/nginx/conf.d/*.conf;  # 包含其他自定义配置
}